d1 $ s "bd sn ~ arpy hh"

-- every is a function which takes other function as a parameter (also called as higher order function)

-- speeding it only one cycle out of three using every
-- You can read this as "every 3rd cycle, make 'sound "bd sn ~ arpy"',
-- go faster by a factor of two."
d1 $ every 3 (fast 2) $ s "bd sn ~ arpy"

-- We can use every with any function that takes single pattern as
-- input (and returns a transformed version as output). For example,
-- we can use 'hurry' instead of fast:
d1 $ every 3 (hurry 2) $ sound "bd sd [~ bd] [cp bd*2]"

-- Because 'rev' is a single word, we don't actually need to put it in
-- parenthesis:
d1 $ every 3 rev $ sound "bd sd [~ bd] [cp bd*2]"


--using effects as functions
d1 $ every 3 (# squiz "5") $ s "cpu:3 [apry bd sn] hh"

-- adding more than one every
d1 $ every 3 (hurry 2) $ every 2 (# squiz "5") $ s "808mt:1 auto:9 [bottle:5 ~ bd sn ] sd"

-- '$' It passes what's on its left, to the function on its right, as a single
-- parameter. '$' has really low priority, which means everything on
-- its right is worked out first before being passed to the left.
-- d1 $ every 3 (fast 2) (sound "bd sd ~ cp")
-- is similar to this
-- d1 $ every 3 (fast 2) $ sound "bd sd ~ cp"


-- This saves you from having to match up ( and ) around a function's
-- final input. It doesn't work with anything other than the final
-- input, so unfortunately this _doesn't_ work
d1 $ every 3 $ fast 2 $ sound "bd sd ~ cp"