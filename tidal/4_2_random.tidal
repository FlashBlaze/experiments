-- repeatCycles is a function that repeats each cycle of a given pattern a given number of times
d1 $ repeatCycles 4 $ n "0*16" # s "cpu" # speed (rand + 2)

-- 'irand' is similar to 'rand', but creates integers
d1 $ s "rash(5,8)" # n (irand 32) # room 0.3 # sz 0.5

-- [|] is used to pick one from a subsequence at random
-- this will always play 0, 5 and 6 and either one of the subsequence
d1 $ n "0 [0|1*8|2*2|3 4 5] 5 6" # s "cpu"

-- ? randomly 'drops' an event
d1 $ s "kick clap? kick snare" # delay 0.3 # delaytime (1/3) # delayfb 0.8 # speed 1.5

-- giving 70% chace of playing it
d1 $ s "bd bd sn?0.7 bd"

-- scramble takes a number, which is the number of parts to equally divide a pattern into then 
-- play those parts at random
d1 $ scramble 4 $ n "[0 1] [2 3] [4 5] [6 7]" # s "arpy"


d1 $ scramble 4 $ n "0 1 2 3" # s "arpy"

-- shuffle takes the sequence and changes the order
-- each cycle plays every one of them exactly once but the order is different
d1 $ shuffle 4 $ n "[0 1] [2 3] [4 5] [6 7]" # s "arpy"

-- The "choose" function is for when you want to pick between
-- single values. It produces a continuous stream, with no
-- structure, so the following won't produce any events:
d1 $ s (choose ["bd", "arpy", "snare"])

-- You'll need to provide some structure, with a function like
-- 'segment', which in this case picks 8 values per cycle:
d1 $ s (segment 8 $ choose ["bd", "arpy", "snare"])

-- Or 'struct', which picks values according to a binary pattern:
d1 $ s (struct "t t ~ t" $ choose ["bd", "arpy", "kick"])

d1 $ s (struct "t(5,8)" $ choose ["bd", "arpy", "kick"])

-- Or by combining it with a pattern that *does* have structure:
-- the parameters to choose are a list of values,
-- *not*, patterns, so you can't normally use mininotation there.
d1 $ squiz "0*2 4 2 5 0 6*2 4 7" # s (choose ["bd", "arpy", "kick"])

-- This *won't* work.
d1 $ squiz "0*2 4 2 5 0 6*2 4 7" # s (choose ["bd*5", "arpy*2", "kick clap"])

  -- 'wchoose' function is like 'choose', but you can give
-- a 'weighting' for each possibility. So something with a weighting
-- of '4' would be twice as likely to be chosen as one with a weighting
-- of '2', for example:
d1 $ s "clap*4" # speed (wchoose [(2, 4), (-2, 2)])

-- stream from different speakers
d1 $ s "bd*8" # pan rand # speed (fast 1.01 $ range 1 3 rand)